{"version":3,"sources":["ExportCsv.jsx","Form.jsx","App.js","serviceWorker.js","index.js"],"names":["exportCsv","props","react_default","a","createElement","className","type","onClick","form","onChange","updateNlcValue","placeholder","getNLC","nlcValue","locationCode","locationName","locationType","crsType","updateTicketValue","updateTicket","ExportCsv","App","state","ticketValue","csvData","e","_this","setState","target","value","alert","url","concat","fetch","headers","authorization","then","response","status","json","nlc","location_code","location_name","location_type","crs_code","require","token","process","oauth","tickets","update","custom_fields","id","result","description","console","log","codes","i","data","forEach","object","push","nlc_code","setTimeout","csvRow","headings","length","join","csvString","document","href","download","body","appendChild","click","Form","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3fb1a073.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction exportCsv(props) {\r\n\r\n    return (\r\n        <div className=\"exportCsv\">\r\n            <h1>Export NLC Data</h1>\r\n            <button type=\"button\" onClick={props.exportCsv}>Export as CSV</button>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default exportCsv;","import React from 'react';\r\nimport ExportCsv from './ExportCsv'\r\n\r\nfunction form(props) {\r\n    return (\r\n        <div className=\"formContainer\">\r\n            <div className=\"searchField\">\r\n                <h1>Input your NLC code to retrieve data...</h1>\r\n                <input type=\"text\" className=\"search\" onChange={props.updateNlcValue} placeholder=\"e.g 0375\" />\r\n                <button className=\"get-weather\" onClick={props.getNLC}>Submit</button>\r\n            </div>\r\n            <div className=\"dataField\">\r\n                <h1>NLC Code: {props.nlcValue}</h1>\r\n                <h2>Location Code: {props.locationCode}</h2>\r\n                <h2>Location Name: {props.locationName}</h2>\r\n                <h2>Location Type: {props.locationType}</h2>\r\n                <h2>CRS Type: {props.crsType}</h2>\r\n            </div>\r\n            <div className=\"ticket\">\r\n               <input type=\"text\" className=\"search\" onChange={props.updateTicketValue} placeholder=\"Input ticket ID...\"></input>\r\n               <button onClick={props.updateTicket}>Add to Zendesk</button>\r\n            </div>\r\n            <ExportCsv\r\n                exportCsv={props.exportCsv}\r\n             />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default form;","import React, { Component } from 'react';\nimport Form from './Form'\nimport './normalize.css';\nimport './App.css';\n\nclass App extends Component {\n  \n  state = {\n    nlcValue: '',\n    ticketValue: '',\n    locationCode: '',\n    locationName: '',\n    locationType: '',\n    crsType: '',\n    csvData: ''\n  }\n\n  updateNlcValue = (e) => {\n    this.setState({\n        nlcValue: e.target.value,\n      });\n  }\n\n  updateTicketValue = (e) => {\n    this.setState({\n        ticketValue: e.target.value,\n      });\n  }\n\n  getNLC = () => {\n    if (this.state.nlcValue == '') {\n      alert(\"Please insert your NLC code to continue.\");\n    } else {\n    const API_KEY = process.env.REACT_APP_NLC_API_KEY;\n    const url = `https://platform.appamondo.com/api/findNLCCode?nlc_code=${this.state.nlcValue}`;\n    const obj = {\n        headers: {\n          authorization: 'Bearer ' + API_KEY,\n      }\n    }\n    fetch(url, obj)\n        .then(response => {\n          if (response.status == 400) {\n            alert('Invalid NLC code, please retry');\n        } else {\n          return response.json()\n          } \n        })\n        .then(nlc => this.setState({\n          locationCode: nlc.location_code,\n          locationName: nlc.location_name,\n          locationType: nlc.location_type,\n          crsType: nlc.crs_code\n        }));\n    };\n};  \n\n  updateTicket = () => { // NPM package 'Zendesk NodeJS API'\n    const Zendesk = require('zendesk-node-api');\n \n    const zendesk = new Zendesk({\n      url: 'https://testamondo.zendesk.com',\n      token: process.env.REACT_APP_ZEN_API_KEY,\n      oauth: true\n    });\n\n    zendesk.tickets.update(`${this.state.ticketValue}`, {\n      custom_fields: [{\n        id: 360000001406,\n        value: `${this.state.locationName}`\n      }],\n    })\n    .then((result) => {\n      if (result.description == 'Not found') {\n        alert(\"Ticket ID not recognised, please try again\");\n      } else {\n        console.log(result);\n        alert(\"Thanks! Your ticket has been submitted.\");\n      }\n    });\n  }\n\n   exportCsv = () => {\n        let codes = [];\n        for (let i = 1; i <= 10; i++) { \n            const API_KEY = process.env.REACT_APP_NLC_API_KEY;\n            const url = `https://platform.appamondo.com/api/getNLCCodes?page=${i}`;\n            const obj = {\n            headers: {\n              authorization: 'Bearer ' + API_KEY,\n          }\n        }\n        fetch(url, obj)\n            .then(response => response.json())\n            .then(nlc => nlc.data)\n            .then(data => data.forEach(object => {\n                codes.push([object.id, \n                            object.nlc_code, \n                            object.location_code, \n                            object.location_name, \n                            object.location_type, \n                            object.crs_code]);\n            }))\n        }\n        setTimeout(() => {\n          this.setState({\n            csvData: codes,\n          })\n          let csvRow = [];\n          let headings = [[\"id\", \"nlc code\", \"location code\", \"location name\", \"location type\", \"crs code\"]]\n          let data = this.state.csvData;\n\n          for (let i = 0; i < data.length; i++) {\n            headings.push([data[i]]);\n          }\n\n          for (let i = 0; i < headings.length; i++) {\n            csvRow.push(headings[i].join(\",\"))\n          }\n          const csvString = csvRow.join(\"%0A\");\n\n          let a = document.createElement(\"a\");\n          a.href='data:attachment/csv,' + csvString;\n          a.target=\"_Blank\";\n          a.download=\"nlccodes.csv\";\n          document.body.appendChild(a);\n          a.click()\n        }, 1000)\n    };\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Form \n          getNLC={this.getNLC}\n          updateNlcValue={this.updateNlcValue}\n          nlcValue={this.state.nlcValue}\n          locationCode={this.state.locationCode}\n          locationName={this.state.locationName}\n          locationType={this.state.locationType}\n          crsType={this.state.crsType}\n          updateTicketValue={this.updateTicketValue}\n          updateTicket={this.updateTicket}\n          exportCsv={this.exportCsv}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}